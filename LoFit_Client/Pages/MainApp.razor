@using LoFit_Models.Dtos
@using LoFit_Models.MockupData

@*Main Page of SPA aplication, responisible for communication with state machine and handles callbacks that subcomponents invoke*@

@if(!CookiesAccepted)
{
<div class="row mb-5">
    <div class="col text-center">
        <div class="alert alert-dismissible alert-warning shadow-lg">
            <strong>Hello</strong> <a>Accept cookies or leave!</a>.
            <button type="button" class="btn-outline-dark text-light border border-3 border-dark rounded-3" data-bs-dismiss="alert" @onclick = "AcceptCookies">Accept</button>
        </div>
    </div>
</div> 
}
@switch(LoFitSpaEngine.GetCurrentStateName())
{
    case SpaEngineStatesEnum.Init:
        <AppInit @rendermode="InteractiveAuto" OnClickCallback="StartTraining"/>
        break;

    case SpaEngineStatesEnum.ListTrainings:
        <ListTrainings @rendermode="InteractiveAuto" userTrainingsList="LoFitSpaEngine.TrainingSetDtos" StartTrainingSetCallback="StartTrainingSet"  AddNewTrainingSetCallback="AddNewTrainingSet"/>
        break;

    case SpaEngineStatesEnum.Training:
        <Training @rendermode="InteractiveAuto" FinishTrainingCallback="FinishTraining"/>
        break;

    case SpaEngineStatesEnum.AddTraining:
        <AddTraining @rendermode="InteractiveAuto" SaveNewTrainingCallback="SaveNewTraining"/>
        break;

    case SpaEngineStatesEnum.Summary:
        <Summary @rendermode="InteractiveAuto" ReturnToInitCallback="ReturnToInit"/>
        break;
    default:
        <h1>Error</h1>
        break;
}

@code{
    public ISpaEngineService LoFitSpaEngine = null;
    public bool CookiesAccepted {get; set;}
    [Inject]
    public ICookieManager CookieManager {get; set;}
    [Inject]
    public IConfiguration Configuration {get; set;}

    //[Inject]
    //public ITrainingService trainingService {get; set;}
    //public IEnumerable<TrainingSetDto> UserTrainingsList {get; set;} 

    
    protected override void OnInitialized()
    {
        this.LoFitSpaEngine =  new SpaEngineService();
 
    }

    protected override async Task OnInitializedAsync()
    {
        CookiesAccepted = await CookieManager.ExistsAsync("Cookies Accepted");
    }

    public async Task StartTraining()
    {
        LoFitSpaEngine.StartTraining();
        //userTrainingsList = await trainingService.ListTrainingsAsync();
        LoFitSpaEngine.TrainingSetDtos = await MockupData.MockUpListTrainingsAsync();
    }
    public async Task AddNewTrainingSet()
    {
        //TODO - add implementation and state transition
        LoFitSpaEngine.AddNewTrainingSet();
    }
    
    public async Task SaveNewTraining(TrainingSetDto newTrainingSet)
    {
        LoFitSpaEngine.SaveNewTraining();
        //TODO - Implement sending new value to db
        LoFitSpaEngine.TrainingSetDtos = await MockupData.MockUpListTrainingsAsync();
    }

    public async Task StartTrainingSet(TrainingSetDto trainingSet)
    {
        //await trainingService.GetExcerciseDetails
        
        LoFitSpaEngine.StartTrainingSet();
    }

    public async Task FinishTraining()
    {
        LoFitSpaEngine.FinishTraining();
    }

    public async Task ReturnToInit()
    {
        LoFitSpaEngine.ReturnToInit();
    }

    public async Task AcceptCookies()
    {
        await CookieManager.SetValueAsync("Cookies Accepted", "True", Configuration.GetValue<int>("CookiesExpirationDays:CookiesAcceptedExpirationDays"));
        Console.WriteLine(Configuration["CookiesExpirationDays:CookiesAcceptedExpirationDays"]);
        CookiesAccepted = await CookieManager.ExistsAsync("Cookies Accepted");
    }
    
}   


